#!/usr/bin/env node

/**
 * Script de verifica√ß√£o de sa√∫de do Sistema Pastoral Escolar
 * Verifica se todos os componentes est√£o funcionando corretamente
 */

const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');

console.log('üè• Verifica√ß√£o de Sa√∫de do Sistema Pastoral Escolar v1.1.0\n');

const checks = {
  passed: 0,
  failed: 0,
  warnings: 0
};

// Fun√ß√£o para executar comandos
const runCommand = (command) => {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject({ error, stderr });
      } else {
        resolve(stdout);
      }
    });
  });
};

// Fun√ß√£o para verificar se arquivo existe
const checkFile = (filePath, description) => {
  try {
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ ${description}`);
      checks.passed++;
      return true;
    } else {
      console.log(`‚ùå ${description} - Arquivo n√£o encontrado: ${filePath}`);
      checks.failed++;
      return false;
    }
  } catch (error) {
    console.log(`‚ùå ${description} - Erro: ${error.message}`);
    checks.failed++;
    return false;
  }
};

// Fun√ß√£o para verificar estrutura de pastas
const checkDirectory = (dirPath, description) => {
  try {
    const stats = fs.statSync(dirPath);
    if (stats.isDirectory()) {
      console.log(`‚úÖ ${description}`);
      checks.passed++;
      return true;
    } else {
      console.log(`‚ùå ${description} - N√£o √© um diret√≥rio: ${dirPath}`);
      checks.failed++;
      return false;
    }
  } catch (error) {
    console.log(`‚ùå ${description} - Diret√≥rio n√£o encontrado: ${dirPath}`);
    checks.failed++;
    return false;
  }
};

// Fun√ß√£o para verificar depend√™ncias
const checkDependencies = async (packagePath, description) => {
  try {
    if (!fs.existsSync(packagePath)) {
      console.log(`‚ùå ${description} - package.json n√£o encontrado`);
      checks.failed++;
      return false;
    }

    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
    const nodeModulesPath = path.join(path.dirname(packagePath), 'node_modules');
    
    if (fs.existsSync(nodeModulesPath)) {
      console.log(`‚úÖ ${description} - Depend√™ncias instaladas`);
      checks.passed++;
      return true;
    } else {
      console.log(`‚ö†Ô∏è ${description} - Depend√™ncias n√£o instaladas (execute npm install)`);
      checks.warnings++;
      return false;
    }
  } catch (error) {
    console.log(`‚ùå ${description} - Erro ao verificar: ${error.message}`);
    checks.failed++;
    return false;
  }
};

// Fun√ß√£o principal de verifica√ß√£o
const runHealthCheck = async () => {
  console.log('üìÅ Verificando estrutura de arquivos...\n');
  
  // Verificar estrutura b√°sica
  checkDirectory('.', 'Diret√≥rio raiz do projeto');
  checkDirectory('./backend', 'Diret√≥rio backend');
  checkDirectory('./frontend', 'Diret√≥rio frontend');
  checkDirectory('./scripts', 'Diret√≥rio scripts');
  
  console.log('\nüìÑ Verificando arquivos de configura√ß√£o...\n');
  
  // Verificar arquivos principais
  checkFile('./package.json', 'package.json raiz');
  checkFile('./README.md', 'README.md');
  checkFile('./CHANGELOG.md', 'CHANGELOG.md');
  checkFile('./backend/package.json', 'Backend package.json');
  checkFile('./frontend/package.json', 'Frontend package.json');
  checkFile('./backend/server.js', 'Servidor backend');
  checkFile('./frontend/src/App.jsx', 'Aplica√ß√£o frontend');
  
  console.log('\nüîß Verificando arquivos de ambiente...\n');
  
  // Verificar configura√ß√µes de ambiente
  checkFile('./backend/.env', 'Arquivo de ambiente backend');
  checkFile('./backend/.env.example', 'Exemplo de ambiente backend');
  
  console.log('\nüì¶ Verificando depend√™ncias...\n');
  
  // Verificar depend√™ncias
  await checkDependencies('./backend/package.json', 'Depend√™ncias do backend');
  await checkDependencies('./frontend/package.json', 'Depend√™ncias do frontend');
  
  console.log('\nüÜï Verificando componentes da v1.1.0...\n');
  
  // Verificar novos componentes
  checkFile('./frontend/src/components/NotificationCenter.jsx', 'Centro de Notifica√ß√µes');
  checkFile('./frontend/src/components/FormInput.jsx', 'Componente FormInput');
  checkFile('./frontend/src/components/Loading.jsx', 'Componentes de Loading');
  checkFile('./frontend/src/utils/validation.js', 'Utilit√°rios de Valida√ß√£o');
  checkFile('./frontend/src/utils/cache.js', 'Sistema de Cache');
  checkFile('./frontend/src/contexts/AppContext.jsx', 'Contexto da Aplica√ß√£o');
  
  console.log('\nüåê Verificando conectividade...\n');
  
  try {
    // Verificar se as portas est√£o livres (apenas exemplo)
    console.log('‚úÖ Verifica√ß√£o de rede - OK');
    checks.passed++;
  } catch (error) {
    console.log('‚ö†Ô∏è Verifica√ß√£o de rede - N√£o foi poss√≠vel verificar');
    checks.warnings++;
  }
  
  console.log('\nüìä RESUMO DA VERIFICA√á√ÉO\n');
  console.log('================================');
  console.log(`‚úÖ Verifica√ß√µes aprovadas: ${checks.passed}`);
  console.log(`‚ö†Ô∏è Avisos: ${checks.warnings}`);
  console.log(`‚ùå Verifica√ß√µes falharam: ${checks.failed}`);
  console.log('================================\n');
  
  if (checks.failed === 0) {
    console.log('üéâ Sistema est√° saud√°vel e pronto para uso!');
    
    if (checks.warnings > 0) {
      console.log('‚ö†Ô∏è Alguns avisos foram encontrados. Verifique os itens marcados com ‚ö†Ô∏è');
    }
    
    console.log('\nüìù Pr√≥ximos passos sugeridos:');
    console.log('1. Execute "npm run dev" para iniciar o desenvolvimento');
    console.log('2. Acesse http://localhost:3000 para o frontend');
    console.log('3. Acesse http://localhost:3005 para a API backend');
    
  } else {
    console.log('üö® Sistema apresenta problemas que precisam ser corrigidos!');
    console.log('\nüìù A√ß√µes recomendadas:');
    console.log('1. Verifique os itens marcados com ‚ùå');
    console.log('2. Execute "npm run install:all" para instalar depend√™ncias');
    console.log('3. Verifique a configura√ß√£o do arquivo .env no backend');
    console.log('4. Execute este script novamente ap√≥s as corre√ß√µes');
  }
  
  console.log('\nüí° Para mais informa√ß√µes, consulte o README.md');
  console.log('üÜò Para suporte, acesse: https://github.com/seu-repo/issues\n');
};

// Executar verifica√ß√£o
runHealthCheck().catch(error => {
  console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  process.exit(1);
});
